{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","size","className","type","href","Math","random","toString","substr","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","console","message"],"mappings":"qJAwDeA,MAhDf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMC,KAAK,SACT,wBAAIC,UAAU,eAAd,QACA,6BACE,2BAAG,4BAAQC,KAAK,UAAb,WACH,2BAAG,uBAAGC,KAAI,cAASC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,KAArD,SACH,2BAAG,uBAAGJ,KAAK,KAAR,cAGP,kBAAC,IAAD,CAAMH,KAAK,oBACT,kBAAC,IAAD,KACE,wBAAIC,UAAU,eAAd,eACA,qDACA,qDACA,qDACA,qDACA,qDACA,qDACA,8CACA,4BACE,yCACA,yCACA,0CAEF,4BACE,yCACA,yCACA,0CAEF,2BAAG,2CAEH,2BAAG,+CAAH,oBAAgD,sDAAhD,UAAsF,uBAAGE,KAAI,cAASC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,KAArD,iBAAtF,wrBAEA,2BACE,4BAAQL,KAAK,UAAb,UADF,OAGE,4BAAQA,KAAK,SAASM,UAAQ,GAA9B,yBCnCMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAFjB,OAIS,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8251adc1.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Card,\n  Pane,\n  Layout,\n  NitramUI\n} from 'nitramui';\n\nfunction App() {\n  return (\n    <NitramUI>\n      <Layout>\n        <Pane size='small'>\n          <h2 className='pre-heading'>Menu</h2>\n          <nav>\n            <p><button type='button'>Button</button></p>\n            <p><a href={`/?_=${Math.random().toString(36).substr(2, 9)}`}>Link</a></p>\n            <p><a href='/'>Visited</a></p>\n          </nav>\n        </Pane>\n        <Pane size='full-minus-small'>\n          <Card>\n            <h2 className='pre-heading'>Pre-Heading</h2>\n            <h1>H1 — Hello world</h1>\n            <h2>H1 — Hello world</h2>\n            <h3>H3 — Hello world</h3>\n            <h4>H4 — Hello world</h4>\n            <h5>H5 — Hello world</h5>\n            <h6>H6 — Hello world</h6>\n            <p>Paragraph text.</p>\n            <ul>\n              <li>List item</li>\n              <li>List item</li>\n              <li>List item</li>\n            </ul>\n            <ol>\n              <li>List item</li>\n              <li>List item</li>\n              <li>List item</li>\n            </ol>\n            <p><code>Code tag</code></p>\n            {/* eslint-disable max-len */}\n            <p><strong>Lorem ipsum</strong> dolor sit amet, <em>consectetur adipiscing</em> elit. <a href={`/?_=${Math.random().toString(36).substr(2, 9)}`}>Mauris luctus</a>, magna a scelerisque convallis, leo magna lobortis diam, at sollicitudin nisl elit vitae tortor. Quisque mattis pharetra ornare. In orci elit, efficitur non felis vel, blandit viverra ligula. Nam et nunc eu augue venenatis dapibus. Quisque et feugiat lorem. Sed nec commodo augue. Quisque facilisis pretium nisl ac rhoncus. Ut sed urna non enim sollicitudin vehicula et sit amet dolor. Nam porta mauris eu semper fermentum. Suspendisse id efficitur ante. Ut fermentum pellentesque mauris id tempus. Vivamus eu gravida quam. Etiam lectus enim, commodo sed tristique ac, aliquam at velit. Ut ultricies, nulla in venenatis placerat, turpis lacus tincidunt tellus, sed accumsan ex mauris a arcu.</p>\n            {/* eslint-enable max-len */}\n            <p>\n              <button type='button'>Button</button>\n              &nbsp;\n              <button type='button' disabled>Disabled button</button>\n            </p>\n          </Card>\n        </Pane>\n      </Layout>\n    </NitramUI>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}